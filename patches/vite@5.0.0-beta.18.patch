diff --git a/dist/node/chunks/dep-pW7U7Lse.js b/dist/node/chunks/dep-pW7U7Lse.js
index a890c882e84fe91c2989c9a07a38cf104b40eb52..3a855ba436fc01666488e645cb62d4a51dd777d4 100644
--- a/dist/node/chunks/dep-pW7U7Lse.js
+++ b/dist/node/chunks/dep-pW7U7Lse.js
@@ -667,7 +667,7 @@ var constants$6 = {
 	    output = `(?:^(?!${output}).*$)`;
 	  }
 	  return output;
-	}; 
+	};
 } (utils$k));
 
 const utils$j = utils$k;
@@ -2803,12 +2803,12 @@ var commondir = function (basedir, relfiles) {
     else {
         var files = basedir;
     }
-    
+
     var res = files.slice(1).reduce(function (ps, file) {
         if (!file.match(/^([A-Za-z]:)?\/|\\/)) {
             throw new Error('relative path without a basedir');
         }
-        
+
         var xs = file.split(/\/+|\\+/);
         for (
             var i = 0;
@@ -2817,7 +2817,7 @@ var commondir = function (basedir, relfiles) {
         );
         return ps.slice(0, i);
     }, files[0].split(/\/+|\\+/));
-    
+
     // Windows correctly handles paths with forward-slashes
     return res.length > 1 ? res.join('/') : '/'
 };
@@ -3368,7 +3368,7 @@ function expand$4(str, isTop) {
     ? expand$4(m.post, false)
     : [''];
 
-  if (/\$$/.test(m.pre)) {    
+  if (/\$$/.test(m.pre)) {
     for (var k = 0; k < post.length; k++) {
       var expansion = pre+ '{' + m.body + '}' + post[k];
       expansions.push(expansion);
@@ -6407,7 +6407,7 @@ class Chunk {
 			// '  test'.trim()
 			//     split   -> '  ' + 'test'
 			//   ✔️ edit    -> '' + 'test'
-			//   ✖️ edit    -> 'test' + '' 
+			//   ✖️ edit    -> 'test' + ''
 			// TODO is this block necessary?...
 			newChunk.edit('', false);
 			this.content = '';
@@ -11382,7 +11382,7 @@ function requireNode$1 () {
 		formatters.O = function (v) {
 			this.inspectOpts.colors = this.useColors;
 			return util.inspect(v, this.inspectOpts);
-		}; 
+		};
 	} (node$1, node$1.exports));
 	return node$1.exports;
 }
@@ -11663,7 +11663,7 @@ function requireBrowser$1 () {
 			} catch (error) {
 				return '[UnexpectedJSONParseError]: ' + error.message;
 			}
-		}; 
+		};
 	} (browser$3, browser$3.exports));
 	return browser$3.exports;
 }
@@ -15704,7 +15704,7 @@ async function urlToBuiltUrl(url, importer, config, pluginContext) {
     const file = url[0] === '/'
         ? path$o.join(config.root, url)
         : path$o.join(path$o.dirname(importer), url);
-    return fileToBuiltUrl(file, config, pluginContext, 
+    return fileToBuiltUrl(file, config, pluginContext,
     // skip public check since we just did it above
     true);
 }
@@ -16148,7 +16148,7 @@ var convertSourceMap$1 = {};
 	exports.generateMapFileComment = function (file, options) {
 	  var data = 'sourceMappingURL=' + file;
 	  return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
-	}; 
+	};
 } (convertSourceMap$1));
 
 var convertSourceMap = /*@__PURE__*/getDefaultExportFromCjs(convertSourceMap$1);
@@ -16694,7 +16694,7 @@ var utils$f = {};
 	  };
 	  flat(args);
 	  return result;
-	}; 
+	};
 } (utils$f));
 
 const utils$e = utils$f;
@@ -19059,7 +19059,7 @@ var fs$f = {};
 	    }
 	    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
 	}
-	exports.createFileSystemAdapter = createFileSystemAdapter; 
+	exports.createFileSystemAdapter = createFileSystemAdapter;
 } (fs$f));
 
 Object.defineProperty(settings$3, "__esModule", { value: true });
@@ -19412,7 +19412,7 @@ var fs$b = {};
 	    }
 	    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
 	}
-	exports.createFileSystemAdapter = createFileSystemAdapter; 
+	exports.createFileSystemAdapter = createFileSystemAdapter;
 } (fs$b));
 
 Object.defineProperty(settings$2, "__esModule", { value: true });
@@ -20755,7 +20755,7 @@ var settings = {};
 	        return Object.assign(Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER), methods);
 	    }
 	}
-	exports.default = Settings; 
+	exports.default = Settings;
 } (settings));
 
 const taskManager = tasks;
@@ -28513,7 +28513,7 @@ var dist = {};
 	        },
 	    };
 	}
-	exports.lilconfigSync = lilconfigSync; 
+	exports.lilconfigSync = lilconfigSync;
 } (dist));
 
 const ALIAS = Symbol.for('yaml.alias');
@@ -31723,7 +31723,7 @@ class Document {
             replacer = undefined;
         }
         const { aliasDuplicateObjects, anchorPrefix, flow, keepUndefined, onTagObj, tag } = options ?? {};
-        const { onAnchor, setAnchors, sourceObjects } = createNodeAnchors(this, 
+        const { onAnchor, setAnchors, sourceObjects } = createNodeAnchors(this,
         // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
         anchorPrefix || 'a');
         const ctx = {
@@ -37811,7 +37811,7 @@ function cssPlugin(config) {
                                 ? moduleGraph.createFileOnlyEntry(file)
                                 : await moduleGraph.ensureEntryFromUrl(stripBase(await fileToUrl$1(file, config, this), (config.server?.origin ?? '') + devBase), ssr));
                         }
-                        moduleGraph.updateModuleInfo(thisModule, depModules, null, 
+                        moduleGraph.updateModuleInfo(thisModule, depModules, null,
                         // The root CSS proxy module is self-accepting and should not
                         // have an explicit accept list
                         new Set(), null, isSelfAccepting, ssr);
@@ -38195,7 +38195,7 @@ function getEmptyChunkReplacer(pureCssChunkNames, outputFormat) {
     const emptyChunkRE = new RegExp(outputFormat === 'es'
         ? `\\bimport\\s*["'][^"']*(?:${emptyChunkFiles})["'];`
         : `(\\b|,\\s*)require\\(\\s*["'][^"']*(?:${emptyChunkFiles})["']\\)(;|,)`, 'g');
-    return (code) => code.replace(emptyChunkRE, 
+    return (code) => code.replace(emptyChunkRE,
     // remove css import while preserving source map location
     (m) => outputFormat === 'es'
         ? `/* empty css ${''.padEnd(m.length - 15)}*/`
@@ -39617,13 +39617,13 @@ function createIsConfiguredAsSsrExternal(config) {
             return false;
         }
         try {
-            return !!tryNodeResolve(id, 
+            return !!tryNodeResolve(id,
             // Skip passing importer in build to avoid externalizing non-hoisted dependencies
             // unresolvable from root (which would be unresolvable from output bundles also)
-            config.command === 'build' ? undefined : importer, resolveOptions, ssr?.target === 'webworker', undefined, true, 
+            config.command === 'build' ? undefined : importer, resolveOptions, ssr?.target === 'webworker', undefined, true,
             // try to externalize, will return undefined or an object without
             // a external flag if it isn't externalizable
-            true, 
+            true,
             // Allow linked packages to be externalized if they are explicitly
             // configured as external
             !!configuredAsExternal)?.external;
@@ -40939,7 +40939,7 @@ function requireDebug () {
 		function coerce(val) {
 		  if (val instanceof Error) return val.stack || val.message;
 		  return val;
-		} 
+		}
 	} (debug$c, debug$c.exports));
 	return debug$c.exports;
 }
@@ -41197,7 +41197,7 @@ function requireNode () {
 		 * Enable namespaces listed in `process.env.DEBUG` initially.
 		 */
 
-		exports.enable(load()); 
+		exports.enable(load());
 	} (node, node.exports));
 	return node.exports;
 }
@@ -41394,7 +41394,7 @@ function requireBrowser () {
 		  try {
 		    return window.localStorage;
 		  } catch (e) {}
-		} 
+		}
 	} (browser, browser.exports));
 	return browser.exports;
 }
@@ -42604,7 +42604,7 @@ var utilsMerge = {exports: {}};
 	    }
 	  }
 	  return a;
-	}; 
+	};
 } (utilsMerge));
 
 var utilsMergeExports = utilsMerge.exports;
@@ -44141,7 +44141,7 @@ var constants$1 = {};
 	exports.isWindows = platform === 'win32';
 	exports.isMacos = platform === 'darwin';
 	exports.isLinux = platform === 'linux';
-	exports.isIBMi = os.type() === 'OS400'; 
+	exports.isIBMi = os.type() === 'OS400';
 } (constants$1));
 
 const fs$7 = require$$0__default;
@@ -45092,7 +45092,7 @@ _watchWithFsEvents(watchPath, realPath, transform, globFilter) {
   if (this.fsw.closed || this.fsw._isIgnored(watchPath)) return;
   const opts = this.fsw.options;
   const watchCallback = async (fullPath, flags, info) => {
-    // PATCH: bypass the callback for better perf when fullPath hit the ignored file list 
+    // PATCH: bypass the callback for better perf when fullPath hit the ignored file list
     if (this.fsw.closed || this.fsw._isIgnored(fullPath)) return;
     if (
       opts.depth !== undefined &&
@@ -46985,7 +46985,7 @@ async function resolveHttpServer({ proxy }, app, httpsOptions) {
             maxSessionMemory: 1000,
             ...httpsOptions,
             allowHTTP1: true,
-        }, 
+        },
         // @ts-expect-error TODO: is this correct?
         app);
     }
@@ -55324,7 +55324,7 @@ var eventemitter3 = {exports: {}};
 	//
 	{
 	  module.exports = EventEmitter;
-	} 
+	}
 } (eventemitter3));
 
 var eventemitter3Exports = eventemitter3.exports;
@@ -55420,7 +55420,7 @@ var requiresPort = function required(port, protocol) {
 	  if (options.auth) {
 	    outgoing.auth = options.auth;
 	  }
-	  
+
 	  if (options.ca) {
 	      outgoing.ca = options.ca;
 	  }
@@ -56922,7 +56922,7 @@ var wsIncoming = {
 	  if(i === false) throw new Error('No such pass');
 
 	  passes.splice(i++, 0, callback);
-	}; 
+	};
 } (httpProxy$3));
 
 var httpProxyExports = httpProxy$3.exports;
@@ -56996,12 +56996,12 @@ var httpProxy$2 = ProxyServer;
 /*!
  * Caron dimonio, con occhi di bragia
  * loro accennando, tutte le raccoglie;
- * batte col remo qualunque s’adagia 
+ * batte col remo qualunque s’adagia
  *
  * Charon the demon, with the eyes of glede,
  * Beckoning to them, collects them all together,
  * Beats with his oar whoever lags behind
- *          
+ *
  *          Dante - The Divine Comedy (Canto III)
  */
 
@@ -57827,7 +57827,7 @@ class ModuleGraph {
             });
         }
     }
-    invalidateModule(mod, seen = new Set(), timestamp = Date.now(), isHmr = false, 
+    invalidateModule(mod, seen = new Set(), timestamp = Date.now(), isHmr = false,
     /** @internal */
     softInvalidate = false) {
         const prevInvalidationState = mod.invalidationState;
@@ -57892,7 +57892,7 @@ class ModuleGraph {
      * @param staticImportedUrls Subset of `importedModules` where they're statically imported in code.
      *   This is only used for soft invalidations so `undefined` is fine but may cause more runtime processing.
      */
-    async updateModuleInfo(mod, importedModules, importedBindings, acceptedModules, acceptedExports, isSelfAccepting, ssr, 
+    async updateModuleInfo(mod, importedModules, importedBindings, acceptedModules, acceptedExports, isSelfAccepting, ssr,
     /** @internal */
     staticImportedUrls) {
         mod.isSelfAccepting = isSelfAccepting;
@@ -57966,7 +57966,7 @@ class ModuleGraph {
     /**
      * @internal
      */
-    async _ensureEntryFromUrl(rawUrl, ssr, setIsSelfAccepting = true, 
+    async _ensureEntryFromUrl(rawUrl, ssr, setIsSelfAccepting = true,
     // Optimization, avoid resolving the same url twice if the caller already did it
     resolved) {
         // Quick path, if we already have a module for this rawUrl (even without extension)
@@ -59659,7 +59659,7 @@ function webWorkerPlugin(config) {
                 if (query.inline != null) {
                     const chunk = await bundleWorkerEntry(config, id, query);
                     const encodedJs = `const encodedJs = "${Buffer.from(chunk.code).toString('base64')}";`;
-                    const code = 
+                    const code =
                     // Using blob URL for SharedWorker results in multiple instances of a same worker
                     workerConstructor === 'Worker'
                         ? `${encodedJs}
@@ -60848,7 +60848,7 @@ function workerImportMetaUrlPlugin(config) {
                         builtUrl = injectQuery(builtUrl, WORKER_FILE_ID);
                         builtUrl = injectQuery(builtUrl, `type=${workerType}`);
                     }
-                    s.update(urlIndex, urlIndex + exp.length, 
+                    s.update(urlIndex, urlIndex + exp.length,
                     // add `'' +` to skip vite:asset-import-meta-url plugin
                     `new URL('' + ${JSON.stringify(builtUrl)}, import.meta.url)`);
                 }
@@ -61684,7 +61684,7 @@ async function createPluginContainer(config, moduleGraph, watcher) {
                     errLocation = numberToPos(ctx._activeCode, pos);
                 }
                 catch (err2) {
-                    logger.error(colors$1.red(`Error in error handler:\n${err2.stack || err2.message}\n`), 
+                    logger.error(colors$1.red(`Error in error handler:\n${err2.stack || err2.message}\n`),
                     // print extra newline to separate the two errors
                     { error: err2 });
                     throw err;
@@ -61935,9 +61935,10 @@ async function createPluginContainer(config, moduleGraph, watcher) {
                     return result;
                 }
             }
-            watchFiles.add(id);
-            if (watcher)
-                ensureWatchedFile(watcher, id, root);
+            console.log('add', id);
+            // watchFiles.add(id);
+            // if (watcher)
+            //     ensureWatchedFile(watcher, id, root);
             return null;
         },
         async transform(code, id, options) {
@@ -64558,7 +64559,7 @@ function buildImportAnalysisPlugin(config) {
                                     });
                                 }
                                 else {
-                                    renderedDeps = depsArray.map((d) => 
+                                    renderedDeps = depsArray.map((d) =>
                                     // Don't include the assets dir if the default asset file names
                                     // are used, the path will be reconstructed by the import preload helper
                                     optimizeModulePreloadRelativePaths
@@ -65193,7 +65194,7 @@ function onRollupWarning(warning, warn, config) {
                 }
             }
             if (warning.plugin === 'rollup-plugin-dynamic-import-variables' &&
-                dynamicImportWarningIgnoreList.some((msg) => 
+                dynamicImportWarningIgnoreList.some((msg) =>
                 // @ts-expect-error warning is RollupLog
                 warning.message.includes(msg))) {
                 return;
